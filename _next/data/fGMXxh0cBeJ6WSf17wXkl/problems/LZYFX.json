{"pageProps":{"editorialData":{"editorial":"<p>Tags: Hashmap, Sets</p>\n<p>Since the characters are independent of upper or lower case, we can make every character lower case (or upper case).</p>\n<p>The problem then requires you to check the occurence of all 26 characters, a set can be used to store all unique character.\nIf the size of the set's 26, it implies that all characters occur in the string.</p>\n<p>Alternatively, a hashmap of sorts can be used to track the occurence of each character. The hashmap can then be traversed to\nverify 26 occurences.</p>\n","solutions":{"cpp":"#include<bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n\n    vector<bool> occur(26, false);\n    for(char x: s) {\n        if(x <= 'Z') occur[x - 'A'] = true;\n        else occur[x - 'a'] = true;\n    }\n\n    int count = 0;\n    for(bool x: occur) if(x) ++count;\n\n    if(count == 26) cout << \"YES\\n\";    \n    else cout << \"NO\\n\";    \n    return 0;\n}","py":"n = int(input())\ns = input()\ns = s.lower()\na = set()\nfor c in s:\n    if c not in a:\n        a.add(c)\nif len(a) == 26:\n    print(\"YES\")\nelse:\n    print(\"NO\") "},"problemData":{"id":"LZYFX","title":"The Quick Brown Fox","difficulty":"easy","problem_url":"https://www.hackerrank.com/contests/alcoding-summer-challenge-2021/challenges/the-quick-brown-fox-1"}}},"__N_SSG":true}