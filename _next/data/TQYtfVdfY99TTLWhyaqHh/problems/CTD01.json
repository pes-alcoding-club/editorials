{"pageProps":{"editorialData":{"editorial":"<h1>Basic Idea</h1>\n<p>Compare the strings from the <strong>right to left</strong> as backspaces remove characters\nin this manner, and to <strong>keep track</strong> of encountered backspace characters.</p>\n<h1>Explanation</h1>\n<p>So we start from right end of the strings. If we encounter a <strong>'#'</strong>\ncharacter, we keep track of it by incrementing a counter for each string.\nIf the previous character is a letter, we simply reduce the counter to show that\na backspace has been used. Now, if at any point a counter becomes zero, it means that the\nprevious character will be a letter and will be present in the final string, unless it is a <strong>'#'</strong>.\nSo we need to check its equality with the character in other string.\nIf they are not equal, we know straightaway that the final strings cannot be equal and we stop further comparisons.\nAlso, if any of the strings get traversed before the other, they cannot be equal.\nOtherwise, the two strings will give same output.</p>\n","solutions":{"c":"#include<stdio.h>\n#include<string.h>\n\nchar* backspace_compare(char *S, char* T) {\n\tint i=strlen(S)-1, j=strlen(T)-1;\n\tint skipS=0, skipT=0;\n\n\twhile (i >= 0 || j >= 0) {\n\t\twhile (i >= 0) {\n\t\t\tif (S[i] == '#') {skipS++; i--;}\n\t\t\telse if (skipS > 0) {skipS--; i--;}\n\t\t\telse break;\n\t\t}\n\t\twhile (j >= 0) {\n\t\t\tif (T[j] == '#') {skipT++; j--;}\n\t\t\telse if (skipT > 0) {skipT--; j--;}\n\t\t\telse break;\n\t\t}\n\t\tif (i >= 0 && j >= 0 && S[i] != T[j])\n\t\t\treturn \"false\";\n\t\tif ((i >= 0) != (j >= 0))\n\t\t\treturn \"false\";\n\t\ti--; j--;\n\t}\n\treturn \"true\";\n}\n\nint main() {\n\tchar S[1000000], T[1000000];\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--) {\n\t\tscanf(\"%s\", S);\n\t\tscanf(\"%s\", T);\n\t\tprintf(\"%s\\n\", backspace_compare(S, T));\n\t}\n}","java":"import java.util.*;\nclass solution {\n\tpublic static boolean backspaceCompare(String S, String T) {\n\t\tint i = S.length() - 1, j = T.length() - 1;\n\t\tint skipS = 0, skipT = 0;\n\n\t\twhile (i >= 0 || j >= 0) {\n\t\t\twhile (i >= 0) {\n\t\t\t\tif (S.charAt(i) == '#') {skipS++; i--;}\n\t\t\t\telse if (skipS > 0) {skipS--; i--;}\n\t\t\t\telse break;\n\t\t\t}\n\t\t\twhile (j >= 0) {\n\t\t\t\tif (T.charAt(j) == '#') {skipT++; j--;}\n\t\t\t\telse if (skipT > 0) {skipT--; j--;}\n\t\t\t\telse break;\n\t\t\t}\n\t\t\tif (i >= 0 && j >= 0 && S.charAt(i) != T.charAt(j))\n\t\t\t\treturn false;\n\t\t\tif ((i >= 0) != (j >= 0))\n\t\t\t\treturn false;\n\t\t\ti--; j--;\n\t\t}\n\t\treturn true;\n\t}\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint t = scan.nextInt();\n\t\tString S, T;\n\t\twhile(t-- != 0) {\n\t\t\tS = scan.next();\n\t\t\tT = scan.next();\n\t\t\tSystem.out.println(backspaceCompare(S, T));\n\t\t}\n\t\tscan.close();\n\t}\n}"},"problemData":{"id":"CTD01","title":"Code to Decode","difficulty":"easy","problem_url":"https://www.hackerrank.com/contests/alcoding-summer-challenge/challenges/ctd01"}}},"__N_SSG":true}