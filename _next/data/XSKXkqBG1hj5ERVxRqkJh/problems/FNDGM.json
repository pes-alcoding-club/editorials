{"pageProps":{"editorialData":{"editorial":"<p>Tags:sorting</p>\n<p>For the given queries we know that the gem is hidden in one of the coordinates. <strong>Our job is to find the point which doesn't belong to any of the intervals</strong>.</p>\n<ol>\n<li>\n<p>We store the (L_i,R_i) values and sort it.</p>\n</li>\n<li>\n<p>We keep track of a variable <em>prev</em> and traverse through the array. We'll check if the <em>prev</em> element is in the given range L_i and R_i:</p>\n<ol>\n<li>If it is then the prev value is changed to R_i+1.</li>\n<li>If not then the value is kept the same.</li>\n</ol>\n</li>\n<li>\n<p>At the end we'll end up with the <em>prev</em> value which is not part of any interval. This gives us our answer.</p>\n</li>\n</ol>\n","solutions":{"cpp":"#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nvoid check(vector<pair<ll, ll>> ranges, ll pos, ll x) {\n    ll last_not_found = 0;\n    bool found = false;\n    for (auto [l, r]: ranges) {\n        assert(l > 0 && r <= x);\n        if (l > 1 + last_not_found) {\n            assert((1 + last_not_found) == pos);\n            assert(found != true);\n            found = true;\n        }\n        last_not_found = max(last_not_found, r);\n    }\n}\n\nint main() {\n    cin.tie(0)->sync_with_stdio(0); // cout << fixed << setprecision(15);\n\n\n    ll x;\n    int q;\n\n    cin >> x >> q;\n    vector<pair<ll, ll>> ranges;\n\n    for (int i = 0; i < q; i++) {\n        ll l, r;\n        cin >> l >> r;\n        ranges.push_back({l, r});\n    }\n\n    sort(ranges.begin(), ranges.end());\n\n    ll last_not_found = 0;\n    for (auto [l, r]: ranges) {\n        assert(l > 0 && r <= x);\n        if (l > 1 + last_not_found) {\n            cout << last_not_found + 1 << \"\\n\";\n            check(ranges, last_not_found + 1, x);\n            return 0;\n        }\n        last_not_found = max(last_not_found, r);\n    }\n    check(ranges, x, x);\n    cout << x << \"\\n\";\n\n    return 0;\n}\nÂ© 2021 GitHub, Inc.\nTerms\nPrivacy\nSecurity\nStatus\nDocs\nContact GitHub\nPricing\nAPI\nTraining\nBlog\nAbout\nLoading complete"},"problemData":{"id":"FNDGM","title":"Find Gem","difficulty":"medium","problem_url":"https://www.hackerrank.com/contests/alcoding-september-challenge/challenges/find-gem"}}},"__N_SSG":true}