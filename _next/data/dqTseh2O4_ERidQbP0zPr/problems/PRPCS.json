{"pageProps":{"editorialData":{"editorial":"<p>This is a simple dynamic programming subset sum problem.\nLet the total sum be equal to S.</p>\n<p>The state of dp would be as follows:\ndp[i] = True if you can achieve the sum i from the given integers.</p>\n<p>The transitions of your dp would be as follows:\ndp[i + a[j]] = True iff dp[i] is True for the integer a[j]\nMake sure i goes from S->0 and NOT 0->S to avoid double counting.</p>\n<p>Once you have all the values you can achieve, just iterate through your dp array and see which value gives you the minimum subset sum ie:\nans = min(ans, max(i, S - i)) for i from 0 to S.</p>\n","solutions":{"cpp":"#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nint main()\n{\n    ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);\n    int n;\n    cin>>n;\n    vector<int> a(n);\n    ll sum = 0;\n    for (int i=1;i<n+1;i++) {\n        cin>>a[i];\n        sum += a[i];\n    }\n    vector<bool> dp(sum + 1, false);\n    dp[0]=true;\n\n    for (int i=0;i<n;i++) {\n        for (int j=sum;j>=0;j--) {\n            if (dp[j]) {\n                dp[j+a[i]]=true;\n            }\n        }\n    }\n    ll ans = sum;\n    for (ll i=0;i<=sum;i++) {\n        if (dp[i]) {\n            ans=min(ans,max(i,sum-i));\n        }\n    }\n\n    cout << ans << \"\\n\";\n    return 0;\n}\n"},"problemData":{"id":"PRPCS","title":"Parallel Processors","difficulty":"medium","problem_url":"https://www.hackerrank.com/contests/alcoding-september-challenge/challenges/parallel-processors"}}},"__N_SSG":true}